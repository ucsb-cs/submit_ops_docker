#!/usr/bin/env python
"""Usage: rabbit_util [options] delete QUEUE
       rabbit_util [options] add QUEUE <KEY:VALUE>...
       rabbit_util [options] dump QUEUE
       rabbit_util [options] list QUEUE
       rabbit_util [options] move SRC_QUEUE DST_QUEUE

-D --not-durable    don't use a durable queue
-h --help           show this
-H --host HOST      rabbitmq host [default: localhost]
"""
import json
import pika
import sys
from docopt import docopt

def queue_items(channel, queue, durable):
    empty = False
    while not empty:
        method, header, body = channel.basic_get(queue=queue)
        if not method:
            empty = True
        else:
            yield body
            if durable:
                channel.basic_ack(delivery_tag=method.delivery_tag)


def main():
    args = docopt(__doc__, version='Rabbit Admin 0.1')

    # Establish connection
    connection = pika.BlockingConnection(
        pika.ConnectionParameters(host=args['--host']))
    channel = connection.channel()
    if args['delete']:
        try:
            channel.queue_delete(queue=args['QUEUE'])
            print('Deleted {}'.format(args['QUEUE']))
        except pika.exceptions.AMQPChannelError as exc:
            print('Queue not found')
    elif args['add']:
        json_data = json.dumps(dict(x.split(':') for x in args['<KEY:VALUE>']))
        channel.queue_declare(queue=args['QUEUE'],
                              durable=not args['--not-durable'])
        channel.basic_publish(exchange='', body=json_data,
                              routing_key=args['QUEUE'],
                              properties=pika.BasicProperties(delivery_mode=2))
    elif args['dump']:
        for item in queue_items(channel, args['QUEUE'],
                                not args['--not-durable']):
            print(item)
    elif args['list']:
        items = []
        # Fetch and output the items
        for item in queue_items(channel, args['QUEUE'],
                                not args['--not-durable']):
            items.append(item)
            print(item)
        # Re-add the items to the queue
        for item in items:
            channel.basic_publish(
                exchange='', body=item, routing_key=args['QUEUE'],
                properties=pika.BasicProperties(delivery_mode=2))
    elif args['move']:
        for item in queue_items(channel, args['SRC_QUEUE'],
                                not args['--not-durable']):
            channel.basic_publish(
                exchange='', body=item, routing_key=args['DST_QUEUE'],
                properties=pika.BasicProperties(delivery_mode=2))
            print(item)
    return 0


if __name__ == '__main__':
    sys.exit(main())
